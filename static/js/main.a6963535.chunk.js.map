{"version":3,"sources":["Geolocated.js","Input.js","Form.js","App.js","serviceWorker.js","index.js"],"names":["Demo","this","props","isGeolocationAvailable","isGeolocationEnabled","coords","react_default","a","createElement","latitude","longitude","React","Component","geolocated","positionOptions","enableHighAccuracy","userDecisionTimeout","dripFormField","_ref","input","_ref$meta","meta","error","dirty","touched","Object","objectWithoutProperties","assign","style","color","dripForm","validations","email","required","password","handlers","invalid","pristine","onSubmit","htmlFor","src_Input","id","type","name","label","placeholder","disabled","onClick","App","handleSubmit","values","console","log","className","Geolocated","src_Form","onValidSubmit","Boolean","window","location","hostname","match","ReactDOM","render","App_App","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"sMAGMA,mLAEE,OAAQC,KAAKC,MAAMC,uBAEdF,KAAKC,MAAME,qBAEZH,KAAKC,MAAMG,OACXC,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,aACIF,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,sBACAF,EAAAC,EAAAC,cAAA,UAAKP,KAAKC,MAAMG,OAAOI,WAE3BH,EAAAC,EAAAC,cAAA,UACIF,EAAAC,EAAAC,cAAA,uBACAF,EAAAC,EAAAC,cAAA,UAAKP,KAAKC,MAAMG,OAAOK,cAKnCJ,EAAAC,EAAAC,cAAA,+CAfAF,EAAAC,EAAAC,cAAA,yCAFAF,EAAAC,EAAAC,cAAA,+DAHOG,IAAMC,WAyBVC,uBAAW,CACtBC,gBAAiB,CACbC,oBAAoB,GAExBC,oBAAqB,KAJVH,CAKZb,mBChBYiB,4BAdD,SAAAC,GAAA,IACZC,EADYD,EACZC,MADYC,EAAAF,EAEZG,KAAQC,EAFIF,EAEJE,MAAOC,EAFHH,EAEGG,MAAOC,EAFVJ,EAEUI,QACnBtB,EAHSuB,OAAAC,EAAA,EAAAD,CAAAP,EAAA,yBAKZZ,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,QAAAiB,OAAAE,OAAA,GACMzB,EACAiB,IAELG,GAASC,GAASC,GAAWlB,EAAAC,EAAAC,cAAA,QAAMoB,MAAO,CAAEC,MAAO,QAAUP,MC4BnDQ,qBAAS,CACtBC,YAAa,CACXC,MAAO,CACLC,UAAU,EACVD,OAAO,GAETE,SAAU,CACRD,UAAU,KAPDH,CArCF,SAAAZ,GAAA,IACXiB,EADWjB,EACXiB,SADWf,EAAAF,EAEXG,KAAQe,EAFGhB,EAEHgB,QAASC,EAFNjB,EAEMiB,SAFN,OAIX/B,EAAAC,EAAAC,cAAA,QAAM8B,SAAUH,EAASG,UACvBhC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO+B,QAAQ,SAAf,iBACAjC,EAAAC,EAAAC,cAACgC,EAAD,CACEC,GAAG,QACHC,KAAK,QACLC,KAAK,QACLC,MAAM,gBACNC,YAAY,8BAIhBvC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,SAAO+B,QAAQ,YAAf,YACAjC,EAAAC,EAAAC,cAACgC,EAAD,CACEC,GAAG,WACHC,KAAK,WACLC,KAAK,WACLC,MAAM,WACNC,YAAY,yBAIhBvC,EAAAC,EAAAC,cAAA,UACEkC,KAAK,SACLI,SAAUV,GAAWC,EACrBU,QAASZ,EAASG,UAHpB,aC1BiBU,6MACnBC,aAAe,SAACC,GACdC,QAAQC,IAAIF,4EAGZ,OACE5C,EAAAC,EAAAC,cAAA,OAAK6C,UAAU,OACb/C,EAAAC,EAAAC,cAAC8C,EAAD,MACAhD,EAAAC,EAAAC,cAAC+C,EAAD,CAAMC,cAAevD,KAAKgD,uBARDrC,aCOb6C,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OAAOzD,EAAAC,EAAAC,cAACwD,EAAD,MAASC,SAASC,eAAe,SD2H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.a6963535.chunk.js","sourcesContent":["import React from \"react\";\nimport { geolocated } from \"react-geolocated\";\n \nclass Demo extends React.Component {\n    render() {\n        return !this.props.isGeolocationAvailable ? (\n            <div>Your browser does not support Geolocation</div>\n        ) : !this.props.isGeolocationEnabled ? (\n            <div>Geolocation is not enabled</div>\n        ) : this.props.coords ? (\n            <table>\n                <tbody>\n                    <tr>\n                        <td>latitude</td>\n                        <td>{this.props.coords.latitude}</td>\n                    </tr>\n                    <tr>\n                        <td>longitude</td>\n                        <td>{this.props.coords.longitude}</td>\n                    </tr>\n                </tbody>\n            </table>\n        ) : (\n            <div>Getting the location data&hellip; </div>\n        );\n    }\n}\n \nexport default geolocated({\n    positionOptions: {\n        enableHighAccuracy: false,\n    },\n    userDecisionTimeout: 5000,\n})(Demo);","import React from 'react';\nimport { dripFormField } from 'react-drip-form';\n\nconst Input = ({\n  input,\n  meta: { error, dirty, touched },\n  ...props,\n}) => (\n  <div>\n    <input\n      {...props}\n      {...input}\n    />\n    {error && dirty && touched && <span style={{ color: 'red' }}>{error}</span>}\n  </div>\n);\n\nexport default dripFormField()(Input);","import React from 'react';\nimport { dripForm } from 'react-drip-form';\nimport Input from './Input';\n\nconst Form = ({\n  handlers,\n  meta: { invalid, pristine },\n}) => (\n  <form onSubmit={handlers.onSubmit}>\n    <div>\n      <label htmlFor=\"email\">Email-Address</label>\n      <Input\n        id=\"email\"\n        type=\"email\"\n        name=\"email\"\n        label=\"Email-Address\"\n        placeholder=\"Enter your Email-Address\"\n      />\n    </div>\n\n    <div>\n      <label htmlFor=\"password\">Password</label>\n      <Input\n        id=\"password\"\n        type=\"password\"\n        name=\"password\"\n        label=\"Password\"\n        placeholder=\"Enter your Password\"\n      />\n    </div>\n\n    <button\n      type=\"submit\"\n      disabled={invalid || pristine}\n      onClick={handlers.onSubmit}\n    >\n      Submit\n    </button>\n  </form>\n);\n\nexport default dripForm({\n  validations: {\n    email: {\n      required: true,\n      email: true,\n    },\n    password: {\n      required: true,\n    },\n  },\n})(Form);","import React, {Component} from 'react';\nimport './App.css';\nimport Geolocated from './Geolocated';\nimport Form from './Form';\n\nexport default class App extends Component {\n  handleSubmit = (values) => {\n    console.log(values);\n  };\n  render() {\n    return (\n      <div className=\"App\">\n        <Geolocated/>\n        <Form onValidSubmit={this.handleSubmit} />\n      </div>\n    );\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}